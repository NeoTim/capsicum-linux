(Note: This is a word-wrapped version of a page from
https://docs.google.com/a/google.com/document/d/1ONDmGBo2ZPMUoUrnLfIZFGeyiOYFwe1fMDD2XKAIrK8/edit)


How to run Capsicum tests

These test scripts use User-Mode Linux (UML) to run the test kernel as a
process, and use hostfs to mount a directory in the userspace test repository
directly. The end result is a test harness which can go from edit to running
unit tests in under two seconds for the null compile, and under five seconds
when recompiling a single .c file.


Infrastructure

	Use debootstrap to create a base image matching your machine’s
distribution, so programs compiled on your machine will run on your test
kernel. The disk image should be called test.img, and placed in the
tools/testing/capsicum_tests directory. The base image’s /sbin/init should be
renamed to init.orig, and the shell script called test-files/init should be
copied into its place. /etc/fstab should be replaced (or combined) with
test-files/fstab. The test scripts currently assume that the UML kernel
executable is in ../linux/build/linux (relative to the userspace test
repository). The command-lines used to build the kernel can be found in the
CAPSICUM_BUILD_HOWTO file.

How it works is that run-test and friends launch the UML kernel with that disk
image, a console on standard I/O, and a runtest= parameter indicating the test
to be executed. The init script uses hostfs to mount the test-files/ directory
from the host machine inside the UML virtual machine. It then parses the
runtest= parameter from /proc/cmdline, and executes it in the shell (with $PATH
set such that you can refer to scripts in test-files/ as bare commands).
run-test usually squashes as much of the output as possible apart from the test
results, but this can obscure things like kernel panics and build messages.
Passing -v as the first parameter gives you all the output.


Kernel tests

	The file capsicum_test.c uses a C unit-test harness originally by Will
Drewry (test_harness.h), which has been ported to kernel-space (and made
optionally selective - if given a prefix, it will only execute tests whose name
begins with that prefix). A simple userspace shim, kt, echoes the prefix into a
special debugfs file, which triggers the in-kernel tests. Output is via
printk(), which goes to the console, which is piped (through some sed magic to
remove startup gunk, unless you specified -v) to your terminal. Voilà!

Example:
$ ./run-test kt
Building...
---- Executing: kt ----
[==========] Running 3 tests from 1 test case.
[ RUN      ] new_cap.is_cap
[       OK ] new_cap.is_cap
[ RUN      ] new_cap.rewrap
[       OK ] new_cap.rewrap
[ RUN      ] new_cap.init_ok
[       OK ] new_cap.init_ok
[==========] 3 / 3 tests passed.
[  PASSED  ]


Userspace tests

	Userspace tests are just C programs, using the same C unit-test harness
as the kernel. There is a Makefile which builds a .c file into a corresponding
.test executable. You can build and run a specific test with the
run-userspace-test script (eg ./run-userspace-test cap_new.test).

Example:
$ ./run-userspace-test cap_new.test
make: Entering directory `.../capsicum_tests/test-files'
make: `cap_new.test' is up to date.
make: Leaving directory `.../capsicum_tests/test-files'
Building...
---- Executing: cap_new.test ----
[==========] Running 2 tests from 1 test cases.
[ RUN      ] global.cap_enter_basic
[       OK ] global.cap_enter_basic
[ RUN      ] global.cap_new_basic
[       OK ] global.cap_new_basic
[==========] 2 / 2 tests passed.
[  PASSED  ]

Running tests in an x86 virtual machine

	These scripts are also capable of running tests in a full x86 virtual
machine, using kvm. This is slower, but more representative of actual hardware.

	Prepare a test.img, as if you were running UML tests. Compile a native
kernel, following the instructions from CAPSICUM_BUILD_HOWTO. (It may be
necessary to make mrproper in the source root directory if you’ve just been
using the UML kernel; I don’t really know why.) Then use the -vm flag to
run-test. For example:

$ ./run-test -vm kt
make: `kt' is up to date.
Building...
---- Executing: kt ----
[==========] Running 8 tests from 3 test cases.
[ RUN      ] fget.simulate_toctou
[       OK ] fget.simulate_toctou
[ RUN      ] fget.fget_raw_light
[       OK ] fget.fget_raw_light
[ RUN      ] fget.fget_raw
[       OK ] fget.fget_raw
[ RUN      ] fget.fget_light
[       OK ] fget.fget_light
[ RUN      ] fget.fget
[       OK ] fget.fget
[ RUN      ] new_cap.is_cap
[       OK ] new_cap.is_cap
[ RUN      ] new_cap.rewrap
[       OK ] new_cap.rewrap
[ RUN      ] new_cap.init_ok
[       OK ] new_cap.init_ok
[==========] 8 / 8 tests passed.
[  PASSED  ]
Refined TSC clocksource calibration: 2659.968 MHz.
sd 0:0:1:0: [sdb] Stopping disk
sd 0:0:0:0: [sda] Stopping disk
^C

To run the kernel under a debugger, use the -kgdb flag (note: this must come
after the -vm flag, eg run-test -vm -kgdb kt) to launch a debugger in a new
gnome-terminal window, and attach the kernel to it.